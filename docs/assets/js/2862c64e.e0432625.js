"use strict";(self.webpackChunk_canvas_ui_docs=self.webpackChunk_canvas_ui_docs||[]).push([[543],{3237:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>r});var a=t(4349);const s={},c=a.createContext(s);function i(n){const e=a.useContext(c);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(c.Provider,{value:e},n.children)}},6085:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"quick-start/vanilla","title":"Vanilla JS","description":"You can also use the low-level createElement to manipulate Canvas UI nodes.","source":"@site/docs/quick-start/vanilla.md","sourceDirName":"quick-start","slug":"/quick-start/vanilla","permalink":"/canvas-ui/quick-start/vanilla","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-start/vanilla.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Installation & Getting Started","permalink":"/canvas-ui/quick-start/installation"},"next":{"title":"Playground","permalink":"/canvas-ui/quick-start/playground"}}');var s=t(4489),c=t(3237);const i={sidebar_position:2},r="Vanilla JS",o={},l=[];function u(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"vanilla-js",children:"Vanilla JS"})}),"\n",(0,s.jsxs)(e.p,{children:["You can also use the low-level ",(0,s.jsx)("code",{children:"createElement"})," to manipulate Canvas UI nodes."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:"() => {\n  const { CanvasUICore } = importCanvasUIPackages()\n\n  const {\n    Size,\n    createElement,\n  } = CanvasUICore\n\n  const containerStyle = {\n    width: 250,\n    flexDirection: 'column'\n  }\n  const textStyle = {\n    maxWidth: containerStyle.width,\n    maxLines: 1,\n    cursor: 'pointer',\n  }\n  const text1 = 'I can eat glass and it doesn\\'t hurt me.'\n  const text2 = '\u79c1\u306f\u30ac\u30e9\u30b9\u3092\u98df\u3079\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u306f\u79c1\u3092\u50b7\u3064\u3051\u307e\u305b\u3093\u3002'\n\n  const canvasElRef = useRef()\n\n  function init (canvasEl) {\n    const canvas = createElement('Canvas')\n    const canvasRect = canvasEl.getBoundingClientRect()\n    const surfaceSize = Size.fromWH(canvasRect.width, canvasRect.height)\n    canvas.prepareInitialFrame()\n    canvas.el = canvasEl\n    canvas.size = surfaceSize\n    canvas.dpr = devicePixelRatio\n\n    const container = createElement('Flex')\n    Object.assign(container.style, containerStyle)\n    canvas.appendChild(container)\n\n    const text = createElement('Text')\n    Object.assign(text.style, textStyle)\n    text.text = text1\n    text.onPointerUp = event => {\n      event.currentTarget.text = text2\n    }\n    container.appendChild(text)\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      init(canvasElRef.current)\n    }, 16)\n  }, [])\n\n  return (\n    <canvas style={{ backgroundColor: '#ffffff', width: '100%', height: '100%' }} ref={canvasElRef}></canvas>\n  )\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}}}]);